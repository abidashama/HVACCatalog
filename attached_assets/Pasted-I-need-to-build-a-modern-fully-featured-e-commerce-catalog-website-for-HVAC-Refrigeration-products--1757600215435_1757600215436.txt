I need to build a modern, fully-featured e-commerce catalog website for HVAC/Refrigeration products (Axeon & Lefoo brands combined) using Next.js 14+ with App Router, GSAP animations, and a car dealer template structure adapted for industrial products. The site should be production-ready with excellent performance, SEO, and user experience.

## Tech Stack Requirements

- Next.js 14+ (App Router)
- TypeScript
- Tailwind CSS
- GSAP (with ScrollTrigger, TextPlugin)
- Framer Motion (for micro-interactions)
- React Query/TanStack Query (data fetching)
- Zustand (state management)
- React Hook Form + Zod (forms/validation)
- Swiper.js (product galleries)
- React Hot Toast (notifications)
- Headless UI (accessible components)
- Next-Auth (if authentication needed)
- Prisma with PostgreSQL/MySQL
- Sharp (image optimization)
## Database Schema

Create a unified products database without brand separation:

### Main Tables:

// Products Table
Product {
  id: string (UUID)
  model_number: string (unique, required)
  title: string
  subtitle: string
  alternate_model: string (for cross-reference)
  description: text
  content: text (rich text)
  
  // Relationships
  category_id: foreign key
  series_id: foreign key
  
  // Pricing
  mop_price: decimal
  original_price: decimal
  box_quantity: integer
  per_piece_price: decimal (calculated)
  
  // Stock
  stock_status: enum ('in_stock', 'out_of_stock', 'on_order')
  stock_quantity: integer
  lead_time: string
  
  // Media
  featured_image: string
  gallery: json (array of image URLs)
  performance_chart: string
  dimensional_drawing: string
  technical_pdf: string
  installation_manual: string
  
  // Specifications (JSON field for flexibility)
  specifications: json {
    // Universal specs
    working_temperature: string
    max_working_pressure: string
    ip_rating: string
    material: string
    connection_input: string
    connection_output: string
    
    // Category-specific specs (conditional)
    pressure_min: number
    pressure_max: number
    pressure_range: string
    switch_type: string
    voltage: string
    orifice_size: string
    flow_rate: string
    capacity_tr: string
    plates_count: number
    power_hp: string
    head_m: number
    // ... more based on category
  }
  
  // SEO
  slug: string (unique)
  meta_title: string
  meta_description: string
  
  // Timestamps
  created_at: datetime
  updated_at: datetime
}

// Categories (Hierarchical)
Category {
  id: string
  name: string
  slug: string
  parent_id: string (nullable, for subcategories)
  icon: string
  description: text
  meta_fields_config: json (defines which fields show for this category)
}

// Product Series
Series {
  id: string
  name: string (LF55, LF32, LFSV-D, etc.)
  slug: string
  description: text
}

// Applications
Application {
  id: string
  name: string (Water Line, Refrigeration, HVAC, etc.)
  slug: string
}

// Certifications
Certification {
  id: string
  name: string (CE, UL, RoHS, etc.)
  icon: string
}

// Relations Tables
ProductApplications (many-to-many)
ProductCertifications (many-to-many)
RelatedProducts (self-referencing many-to-many)
CompatibleProducts (self-referencing many-to-many)
ProductAccessories (self-referencing many-to-many)

// Reviews
Review {
  id: string
  product_id: foreign key
  customer_name: string
  rating: integer (1-5)
  title: string
  comment: text
  verified_purchase: boolean
  created_at: datetime
}
## Project Structure

src/
├── app/
│   ├── (shop)/
│   │   ├── layout.tsx (main shop layout)
│   │   ├── page.tsx (homepage)
│   │   ├── products/
│   │   │   ├── page.tsx (products archive with filters)
│   │   │   └── [slug]/
│   │   │       └── page.tsx (single product page)
│   │   ├── category/
│   │   │   └── [slug]/
│   │   │       └── page.tsx (category archive)
│   │   └── search/
│   │       └── page.tsx (search results)
│   ├── api/
│   │   ├── products/
│   │   │   ├── route.ts (GET all products with filters)
│   │   │   └── [id]/
│   │   │       └── route.ts (GET single product)
│   │   ├── filters/
│   │   │   └── route.ts (GET filter options with counts)
│   │   └── search/
│   │       └── route.ts (search endpoint)
│   ├── layout.tsx (root layout)
│   └── globals.css
├── components/
│   ├── layout/
│   │   ├── Header.tsx (with mega menu)
│   │   ├── Footer.tsx
│   │   └── Breadcrumb.tsx
│   ├── products/
│   │   ├── ProductCard.tsx (archive card)
│   │   ├── ProductGrid.tsx (responsive grid)
│   │   ├── ProductGallery.tsx (with zoom & swiper)
│   │   ├── ProductSpecs.tsx (dynamic specs table)
│   │   ├── ProductTabs.tsx (tabbed content)
│   │   ├── RelatedProducts.tsx
│   │   └── QuickView.tsx (modal)
│   ├── filters/
│   │   ├── FilterSidebar.tsx
│   │   ├── FilterBar.tsx (horizontal filters)
│   │   ├── ActiveFilters.tsx (selected filters pills)
│   │   ├── PriceRangeSlider.tsx
│   │   └── SortDropdown.tsx
│   ├── ui/
│   │   ├── Button.tsx
│   │   ├── Badge.tsx
│   │   ├── Card.tsx
│   │   ├── Input.tsx
│   │   ├── Select.tsx
│   │   ├── Skeleton.tsx
│   │   └── Modal.tsx
│   └── animations/
│       ├── ScrollReveal.tsx
│       ├── ParallaxSection.tsx
│       └── AnimatedCounter.tsx
├── lib/
│   ├── prisma.ts
│   ├── gsap.ts (GSAP configuration)
│   └── utils.ts
├── hooks/
│   ├── useProducts.ts
│   ├── useFilters.ts
│   ├── useCart.ts
│   └── useInfiniteScroll.ts
├── stores/
│   ├── filterStore.ts (Zustand)
│   ├── cartStore.ts
│   └── compareStore.ts
└── types/
    └── index.ts (TypeScript interfaces)
## Detailed Component Specifications

### 1. Homepage Hero Section
tsx
- Animated headline with GSAP TextPlugin
- Particle background or gradient mesh
- Search bar with autocomplete
- Quick category cards with hover animations
- Stats counter (products, categories, brands)

### 2. Products Archive Page (/products)
```tsx
Features:
- Server-side pagination with URL params
- Infinite scroll option
- View switcher (Grid/List)
- Quick filters bar (sticky)
- Advanced sidebar filters
- Product count and sorting
- Loading skeletons
- No results state

Filters to implement:
- Multi-select categories (hierarchical)
- Series checkboxes
- Price range slider (dual handle)
- Application type
- Certifications
- Connection types
- Voltage options
- Stock status
- Ratings filter

GSAP Animations:
- Stagger product cards on load
- Filter panel slide animations
- Smooth scroll to top
- Card hover effects (scale, shadow)
```

### 3. Single Product Page (/products/[slug])
```tsx
Sections needed:

Product Gallery:
Main image with zoom on hover (using GSAP)
Thumbnail carousel (Swiper.js)
Lightbox modal for fullscreen
360° view option (if applicable)
Video support

Product Information:
Breadcrumb navigation
Category & series badges
Title, model, alternate models
Rating stars with review count
Price section with savings
Stock status indicator
Animated "Add to Cart" button
Quantity selector
Wishlist & Compare buttons

Quick Specs Grid:
Icon-based specification grid
Conditional rendering based on category
Tooltip for detailed info

Tabs Section:
Smooth tab switching animation
Specifications (full table)
Technical Features (with icons)
Downloads (PDF, CAD, manuals)
Compatible Products
Reviews & Ratings
Q&A Section

Related Products:
Carousel with navigation
"Frequently Bought Together"
Bundle pricing option ```

### 4. Filter System Implementation
```typescript
// Filter state management with Zustand
interface FilterState {
  categories: string[]
  series: string[]
  priceRange: [number, number]
  applications: string[]
  certifications: string[]
  connectionTypes: string[]
  voltages: string[]
  stockStatus: string[]
  sortBy: 'price_asc' | 'price_desc' | 'name' | 'newest'
  viewMode: 'grid' | 'list'
  itemsPerPage: number
  currentPage: number
}

// URL sync for filters (for SEO and sharing)
// Example: /products?category=pressure-switches&series=lf55&price=500-5000
```

### 5. Search Functionality
tsx
Features:
- Instant search with debouncing
- Search suggestions dropdown
- Recent searches
- Popular searches
- Category-scoped search
- Search in model numbers, titles, descriptions
- Fuzzy matching for typos
- Search results highlighting

### 6. GSAP Animations to Implement

// Timeline animations for page load
1. Header fade in
2. Hero text reveal (SplitText)
3. Category cards stagger in
4. Product cards batch animation

// Scroll-triggered animations
- Parallax hero background
- Section reveals on scroll
- Counter animations for stats
- Progress bar for page scroll
- Sticky elements with transform

// Interactive animations
- Magnetic buttons on hover
- Card tilt effects
- Smooth accordion for filters
- Gallery image transitions
- Cart add animation (product flies to cart)
- Tab sliding indicator
- Modal open/close with scale

// Performance considerations
- Use CSS transforms only
- Implement will-change carefully
- Lazy load animations below fold
- Use intersection observer
- Batch DOM updates
### 7. Performance Optimizations

Requirements:
1. Image optimization:
   - Next/Image with blur placeholder
   - WebP format with fallbacks
   - Responsive sizes
   - Lazy loading

2. Code splitting:
   - Dynamic imports for heavy components
   - Route-based code splitting
   - Conditional polyfills

3. Caching strategy:
   - Static generation for category pages
   - ISR for product pages (revalidate: 3600)
   - Client-side caching with React Query
   - Service worker for offline support

4. Performance metrics targets:
   - LCP < 2.5s
   - FID < 100ms
   - CLS < 0.1
   - Lighthouse score > 90
### 8. SEO Implementation

Each page needs:
- Dynamic meta tags
- Open Graph tags
- Twitter Cards
- Schema.org structured data for products
- XML sitemap generation
- Robots.txt
- Canonical URLs
- Breadcrumb schema
- Product review schema
### 9. Responsive Design Breakpoints

- Mobile: 320px - 768px
- Tablet: 768px - 1024px
- Desktop: 1024px - 1440px
- Wide: 1440px+

Mobile-specific features:
- Bottom navigation bar
- Swipeable filters panel
- Touch-optimized gallery
- Simplified product cards
- Floating action buttons
### 10. Additional Features

1. Compare Products:
   - Add up to 4 products
   - Side-by-side comparison table
   - Highlight differences
   - Sticky compare bar

2. Recently Viewed:
   - Track last 10 viewed products
   - Persistent across sessions
   - Quick access dropdown

3. Quick View Modal:
   - Product preview without navigation
   - Add to cart from modal
   - Image gallery included

4. Advanced Search Filters:
   - Save filter presets
   - Share filter URLs
   - Reset all filters
   - Filter counts in real-time

5. Bulk Actions:
   - Request quote for multiple items
   - Download multiple PDFs
   - Print product sheets

6. Analytics Integration:
   - Google Analytics 4
   - Product view tracking
   - Add to cart events
   - Search tracking
   - Filter usage analytics
### 11. Sample API Endpoints

// Products with filters
GET /api/products?
  category=pressure-switches
  &series=lf55,lf32
  &priceMin=500
  &priceMax=5000
  &applications=refrigeration
  &sort=price_asc
  &page=1
  &limit=24

// Single product
GET /api/products/lf5532-auto

// Filter options with counts
GET /api/filters?category=pressure-switches

// Search
GET /api/search?q=pressure+switch&limit=10

// Related products
GET /api/products/lf5532-auto/related

// Compatible products
GET /api/products/lf5532-auto/compatible
### 12. Testing Requirements

1. Unit tests for utilities
2. Component testing with React Testing Library
3. E2E tests for critical paths:
   - Product search and filter
   - Add to cart flow
   - Product page navigation
4. Performance testing
5. Accessibility testing (WCAG 2.1 AA)
6. Cross-browser testing
## Deployment Considerations

Platform: Vercel/Netlify/AWS Amplify
Database: PostgreSQL (Supabase/Neon/PlanetScale)
CDN: Cloudflare for images
Monitoring: Sentry for error tracking
Analytics: Google Analytics + Hotjar
## Final Notes

Build this application progressively:
1. Start with core pages and navigation
2. Implement product display and filtering
3. Add GSAP animations incrementally
4. Optimize performance
5. Add advanced features

Focus on:
- Clean, maintainable code
- Type safety throughout
- Excellent mobile experience
- Fast page loads
- Smooth animations that enhance, not distract
- SEO best practices
- Accessibility compliance

The goal is a professional, high-performance e-commerce catalog that rivals major industrial suppliers' websites while maintaining the engaging visual appeal of modern b2b  websites.